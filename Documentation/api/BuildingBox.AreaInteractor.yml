### YamlMime:ManagedReference
items:
- uid: BuildingBox.AreaInteractor
  commentId: T:BuildingBox.AreaInteractor
  id: AreaInteractor
  parent: BuildingBox
  children:
  - BuildingBox.AreaInteractor.interactionAreas
  langs:
  - csharp
  - vb
  name: AreaInteractor
  nameWithType: AreaInteractor
  fullName: BuildingBox.AreaInteractor
  type: Class
  source:
    id: AreaInteractor
    path: ''
    startLine: 1001
  assemblies:
  - cs.temp.dll
  namespace: BuildingBox
  syntax:
    content: 'public class AreaInteractor : MonoBehaviour'
    content.vb: >-
      Public Class AreaInteractor
          Inherits MonoBehaviour
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: BuildingBox.AreaInteractor.interactionAreas
  commentId: F:BuildingBox.AreaInteractor.interactionAreas
  id: interactionAreas
  parent: BuildingBox.AreaInteractor
  langs:
  - csharp
  - vb
  name: interactionAreas
  nameWithType: AreaInteractor.interactionAreas
  fullName: BuildingBox.AreaInteractor.interactionAreas
  type: Field
  source:
    id: interactionAreas
    path: ''
    startLine: 1004
  assemblies:
  - cs.temp.dll
  namespace: BuildingBox
  syntax:
    content: protected List<InteractionArea> interactionAreas
    return:
      type: Global.List{BuildingBox.InteractionArea}
    content.vb: Protected interactionAreas As List(Of InteractionArea)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: BuildingBox
  commentId: N:BuildingBox
  name: BuildingBox
  nameWithType: BuildingBox
  fullName: BuildingBox
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.List{BuildingBox.InteractionArea}
  commentId: '!:Global.List{BuildingBox.InteractionArea}'
  definition: Global.List`1
  name: List<InteractionArea>
  nameWithType: List<InteractionArea>
  fullName: List<BuildingBox.InteractionArea>
  nameWithType.vb: List(Of InteractionArea)
  fullName.vb: List(Of BuildingBox.InteractionArea)
  name.vb: List(Of InteractionArea)
  spec.csharp:
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BuildingBox.InteractionArea
    name: InteractionArea
    nameWithType: InteractionArea
    fullName: BuildingBox.InteractionArea
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BuildingBox.InteractionArea
    name: InteractionArea
    nameWithType: InteractionArea
    fullName: BuildingBox.InteractionArea
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
